/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package any.data;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class original_files extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2509308555068311901L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"original_files\",\"namespace\":\"any.data\",\"fields\":[{\"name\":\"raw_data\",\"type\":[\"null\",\"bytes\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer raw_data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public original_files() {}

  /**
   * All-args constructor.
   * @param raw_data The new value for raw_data
   */
  public original_files(java.nio.ByteBuffer raw_data) {
    this.raw_data = raw_data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return raw_data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: raw_data = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'raw_data' field.
   * @return The value of the 'raw_data' field.
   */
  public java.nio.ByteBuffer getRawData() {
    return raw_data;
  }

  /**
   * Sets the value of the 'raw_data' field.
   * @param value the value to set.
   */
  public void setRawData(java.nio.ByteBuffer value) {
    this.raw_data = value;
  }

  /**
   * Creates a new original_files RecordBuilder.
   * @return A new original_files RecordBuilder
   */
  public static any.data.original_files.Builder newBuilder() {
    return new any.data.original_files.Builder();
  }

  /**
   * Creates a new original_files RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new original_files RecordBuilder
   */
  public static any.data.original_files.Builder newBuilder(any.data.original_files.Builder other) {
    return new any.data.original_files.Builder(other);
  }

  /**
   * Creates a new original_files RecordBuilder by copying an existing original_files instance.
   * @param other The existing instance to copy.
   * @return A new original_files RecordBuilder
   */
  public static any.data.original_files.Builder newBuilder(any.data.original_files other) {
    return new any.data.original_files.Builder(other);
  }

  /**
   * RecordBuilder for original_files instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<original_files>
    implements org.apache.avro.data.RecordBuilder<original_files> {

    private java.nio.ByteBuffer raw_data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(any.data.original_files.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.raw_data)) {
        this.raw_data = data().deepCopy(fields()[0].schema(), other.raw_data);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing original_files instance
     * @param other The existing instance to copy.
     */
    private Builder(any.data.original_files other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.raw_data)) {
        this.raw_data = data().deepCopy(fields()[0].schema(), other.raw_data);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'raw_data' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getRawData() {
      return raw_data;
    }

    /**
      * Sets the value of the 'raw_data' field.
      * @param value The value of 'raw_data'.
      * @return This builder.
      */
    public any.data.original_files.Builder setRawData(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.raw_data = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'raw_data' field has been set.
      * @return True if the 'raw_data' field has been set, false otherwise.
      */
    public boolean hasRawData() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'raw_data' field.
      * @return This builder.
      */
    public any.data.original_files.Builder clearRawData() {
      raw_data = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public original_files build() {
      try {
        original_files record = new original_files();
        record.raw_data = fieldSetFlags()[0] ? this.raw_data : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
